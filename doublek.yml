CLI_NAME = cli
SRV_NAME = srv

CC = gcc -std=c99
CFLAGS = -Ilib  -Imlx #-g -fsanitize=address -Wall -Wextra -Werror

LIB = $(wildcard lib/*.h)
CLI_SRC = $(wildcard src/client/*.c)
SRV_SRC = $(wildcard src/server/*.c)

CLI_OBJ = $(CLI_SRC:.c=.o)
SRV_OBJ = $(SRV_SRC:.c=.o)

all: $(MINILIBX) $(CLI_NAME) $(SRV_NAME)

$(MINILIBX)
	ifeq ($(shell uname -s), Darwin)
		$(CC) $(OBJS) $(LDFLAGS_macOS) -o $@
	else
		$(CC) $(OBJS) $(LDFLAGS_linux) -o $@
	endif

$(CLI_NAME) : $(CLI_OBJ)
	$(CC) $(CFLAGS) $(CLI_OBJ) -Lmlx -lmlx -framework OpenGL -framework AppKit -o $(CLI_NAME)

$(SRV_NAME) : $(SRV_OBJ)
	$(CC) $(CFLAGS) $(SRV_OBJ) -o $(SRV_NAME)

$(CLI_OBJ) : $(CLI_SRC)
	$(CC) $(CFLAGS) -c $< -o $@

$(SRV_OBJ) : $(SRV_SRC)
	$(CC) $(CFLAGS) -c $< -o $@

clean:
	@rm -rf $(CLI_OBJ)
	@rm -rf $(SRV_OBJ)

fclean: clean
	@rm -rf $(CLI_NAME)
	@rm -rf $(SRV_NAME)

re: fclean all

.PHONNY: re all fclean clean



	void	*mlx;
	void	*mlx_win;
	t_data	img;

	mlx = mlx_init();
	mlx_win = mlx_new_window(mlx, 500, 500, "Hello world!");
	img.img = mlx_new_image(mlx, 500, 500);
	img.addr = mlx_get_data_addr(img.img, &img.bits_per_pixel, &img.line_length,
								&img.endian);
    for(int i = 0; i < 20; i++)
    {
	    my_mlx_pixel_put(&img, i, i, 0x00FF0000);
    }
	mlx_put_image_to_window(mlx, mlx_win, img.img, 0, 0);
	mlx_loop(mlx);



	typedef struct	s_data {
	void	*img;
	char	*addr;
	int		bits_per_pixel;
	int		line_length;
	int		endian;
}				t_data;

void	my_mlx_pixel_put(t_data *data, int x, int y, int color)
{
	char	*dst;

	dst = data->addr + (y * data->line_length + x * (data->bits_per_pixel / 8));
	*(unsigned int*)dst = color;
}




    double velo = 25;
    double angle = 45;
    double v0x = get_vx(velo, angle);
    double v0y = get_vy(velo, angle);
    
    double g = 9.81;
    double t = 0.1;
    
    double totalTime = time_flight(v0y, g);
    double N = get_N_interval(totalTime, t);

    printf("%f\n", N);


		double vx = calc_vx(25, 45);
    double vy = calc_vy(25, 45);
    double total_time = T_flight(vy, 9.81);
    double peak = T_peak(total_time);
    double interval = N_interval(total_time, 0.1);



double vx = calc_vx(25, 45);
double vy = calc_vy(25, 45);
double total_time = T_flight(vy, 9.81);
double peak = T_peak(total_time);
double interval = N_interval(total_time, 0.1);

struct timespec t;
t.tv_sec = 0;
t.tv_nsec = (1 % 10000) * 100000000;

for(int i = 0; i < interval; i++)
{
		printf("{x: %f, y: %f} - [%f]\n", get_xt(vx, T_time(i, 0.1)), get_yt(vy, T_time(i, 0.1), 9.81), get_vyt(vy, 9.81, T_time(i, 0.1)));
		nanosleep(&t, NULL);
}




while (1)
{
		socklen_t len = sizeof(server->client);
		int client = accept(server->socket, (struct sockaddr*)&server->client, &len);
		
		int rt = recv(client, server->request, sizeof(server->request) - 1, 0);
		server->request[rt] = '\0';
		if (rt > 0)
		{
				printf("%s\n", server->request);
				memset(server->response, 0, sizeof(server->response));
				ssize_t sd = send(client, server->response, sizeof(server->response), 0);
		}
		else
				close(client);
		memset(server->request, 0, sizeof(server->request));
}



void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    
    // OpenGL drawing commands here
    
    glutSwapBuffers();
}

int main(int argc, char** argv) {
    // Initialize GLUT
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(800, 600);
    glutCreateWindow("OpenGL Program");

    // Register callback functions
    glutDisplayFunc(display);

    // Set background color
    glClearColor(0Xff, 0.0, 0.0, 1.0);

    // Enter the GLUT event processing loop
    glutMainLoop();
    return 0;
}










-------------------------------------------
	char **json = ft_split_sized(headers->headers[headers->size - 1], ':', &size);
	printf("%f\n", strtod(json[1], NULL));
	printf("%f\n", strtod(json[3], NULL));




	double vx = calc_vx(strtod(json[3], NULL), strtod(json[1], NULL));
	double vy = calc_vy(strtod(json[3], NULL), strtod(json[1], NULL));
	double total_time = T_flight(vy, 9.81);
	double peak = T_peak(total_time);
	double interval = N_interval(total_time, 0.1);

	struct timespec t;
	t.tv_sec = 0;
	t.tv_nsec = (1 % 10000) * 100000000;

	for(int i = 0; i <= interval; i++)
	{
			printf("{x: %f, y: %f} - [%f]\n", get_xt(vx, T_time(i, 0.1)), 
																				get_yt(vy, T_time(i, 0.1), 9.81), 
																				get_vyt(vy, 9.81, T_time(i, 0.1))
							);
			nanosleep(&t, NULL);
	}